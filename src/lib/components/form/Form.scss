@use "sass:map";

@use "@/styles/abstracts" as *;

.form {
  display: flex;
  flex-direction: column;
  gap: #{map.get($spacing, 2)};
  text-align: start;
  margin-bottom: #{map.get($spacing, 3)};
  color: var(--color-2);

  &-inert {
    & input,
    & button {
      background-color: var(--color-2-muted);
    }
  }

  &-container {
    width: 100%;
    max-width: 700px;
    border: #{map.get($border-sizes, 2)} solid var(--color-2);
    border-radius: #{map.get($border-radius-sizes, 5)};
    padding: #{map.get($spacing, 5)};
  }

  &-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: #{map.get($spacing, 2)};

    @include media-phone {
      flex-direction: column;
      align-items: flex-start;
    }
  }

  &-row {
    &-fields {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: #{map.get($spacing, 5)};
      justify-content: center;

      @include media-phone {
        grid-template-columns: 1fr;
      }
    }

    &-btns {
      display: flex;
      justify-content: flex-end;
      align-items: center;
      gap: #{map.get($spacing, 2)};

      @include media-phone {
        width: 100%;
        justify-content: space-between;
      }
    }
  }

  &-control {
    display: flex;
    flex-direction: column;
    gap: #{map.get($spacing, 1)};
    flex: 1 1 0px;

    &-error {
      grid-column: 2 / 3;
      justify-self: start;
      color: var(--color-danger-emphasis);

      &-item {
        text-align: left;
      }
    }
  }

  &-input {
    display: block;
    justify-self: stretch;
    align-self: stretch;
    padding: #{map.get($spacing, 3)} #{map.get($spacing, 4)};
    background-color: white;
    border: 2px solid var(--color-2-muted);
    border-radius: 5px;
    transition: all 0.3s;

    &:focus {
      outline: none;
      box-shadow: #{$shadow-md};
      border: 2px solid var(--color-1);
    }

    &:required {
      border: 2px solid var(--color-2);
    }

    &:focus:invalid,
    &-error:not(#_) {
      border: 2px solid var(--color-danger-muted);
    }
  }

  &-label {
    display: block;
    justify-self: start;
    transition: all 0.3s;

    &:has(+ input:required) {
      font-weight: bold;
    }
  }

  &-error,
  &-message {
    justify-self: center;
    font-size: #{map.get($font-sizes, 6)};
    margin-bottom: #{map.get($spacing, 2)};
    padding: #{map.get($spacing, 1)} #{map.get($spacing, 2)};
    border-radius: #{map.get($border-radius-sizes, 4)};

    &-header {
      margin-bottom: #{map.get($spacing, 2)};
    }

    &-item {
      text-align: left;
    }
  }

  &-error {
    color: var(--color-danger);
    background-color: var(--color-warning-muted);
  }

  &-message {
    color: var(--color-success-emphasis);
  }

  &-btn {
    &-submit {
      @include btn(success, outline, 4);
    }

    &-cancel,
    &-back {
      @include btn(warning, outline, 4);
    }

    &-edit {
      @include btn(1, outline, 4);
    }

    &-delete {
      @include btn(danger, outline, 4);
    }
  }

  &_radio-group {
    width: 49%;
    display: inline-block;
  }

  &-radio-input {
    display: none;
  }

  &-radio-label {
    cursor: pointer;
    padding-left: 4.5rem;
    position: relative;
  }

  &-radio-btn {
    display: inline-block;
    width: 3rem;
    height: 3rem;
    border: 5px solid var(--color-1);
    border-radius: 50%;
    position: absolute;
    top: -0.4rem;
    left: 0;

    &::after {
      content: "";
      display: block;
      width: 1.3rem;
      height: 1.3rem;
      border-radius: 50%;
      background-color: var(--color-1);
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      opacity: 0;
      transition: all 0.2s;
    }
  }

  &-radio-input:checked + &-radio-label &-radio-btn::after {
    opacity: 1;
  }
}
